/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import XMLHelper.ConnectionHelper;
import XMLHelper.DatabaseDetailHelper;
import XMLHelper.TaskHelper;
import componentBean.ComparisonTask;
import componentBean.DBConnection;
import componentBean.DBTable;
import componentBean.SessionParameter;
import componentBean.TaskSourceObject;
import componentBean.TaskTargetObject;
import dbHelper.ConnectionProvider;
import dbHelper.DataOperation;
import dbHelper.DatabaseHelper;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.TrayIcon;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.bind.JAXBException;
import xmlBean.Reference;

/**
 *
 * @author nimeshd
 */
public class ColumnSelectionPage extends javax.swing.JFrame {

    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    SimpleDateFormat sdfTime = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
    String directory = System.getProperty("user.home") + "\\Desktop\\DBComp-Results";
    public static int tableCount = 0;
    static String missingTables = null;
    DatabaseDetailHelper DBDetailHelper = new DatabaseDetailHelper();
    List<DBTable> tablesToBeUpdated = new ArrayList<>();
    static List<String> tablesPrimKeyIssue = new ArrayList<>(), buffTablesPrimKeyIssue = new ArrayList<>();
    static boolean canProceed = true;
    public static ColumnSelectionPage columnSelectionPage;
    Map<String, String> tableConstraints = new HashMap<>();

    /**
     * Creates new form NewJFrame
     */
    public ColumnSelectionPage() {
        File f = new File(directory);
        if (!f.exists()) {
            f.mkdir();
        }
        System.out.println("------" + this.getName());
        outputPath = directory;
        initComponents();
        if (tablesPrimKeyIssue == null || tablesPrimKeyIssue.isEmpty()) {
            jLabel7.setForeground(Color.black);
            jLabel7.setText("Message: Finished Initializing Columns.");
            canProceed = true;
        } else {
            System.out.println("Inside primary error");
            jLabel7.setForeground(Color.red);
            jLabel7.setText("Message: Primary Columns missing for tables:" + tablesPrimKeyIssue.toString().replace("[", "").replace("]", ""));
            canProceed = false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton12 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Jupiter - Data Comparer Tool");
        setLocation(new java.awt.Point(300, 150));
        setName("tableSelectionFrame"); // NOI18N

        jButton12.setText("Cancel");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton17.setText("Execute");
        jButton17.setSelected(true);
        jButton17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton17MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton17MouseReleased(evt);
            }
        });
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Back");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(153, 153, 153));
        jButton19.setText("Save as New Task");
        jButton19.setFocusPainted(false);
        jButton19.setName("next"); // NOI18N
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Table List"));
        jList1.setModel(selectedTableListModel);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("This is to filter out environment specific columns to avoid unnecessary differences. You can restrict process for important data columns only.");

        jList2.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Column Selection"));
        jList2.setModel(selectedTableColumnListModel);
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configure Output"));

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Show unique data ");
        jCheckBox1.setActionCommand("BothUnique");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Existing only in source");
        jCheckBox2.setActionCommand("SourceUnique");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Show difference of both");
        jCheckBox3.setActionCommand("Difference");

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Existing only in target");
        jCheckBox4.setActionCommand("TargetUnique");
        jCheckBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox4ItemStateChanged(evt);
            }
        });
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("HTML");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Text");

        jLabel2.setText("Output Format:");

        jLabel3.setText("Criteria:");

        jLabel4.setText("The comparison result will be stored under");

        jLabel5.setText("default location: ");

        jLabel6.setText(outputPath);

        jButton2.setText("Change Output Location");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox5.setText("Control Fields needed");
        jCheckBox5.setToolTipText("This will further include control fields like SYS_CREATION_DATE, APPLICATION_ID etc. in the comparison");
        jCheckBox5.setEnabled(false);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox3)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jCheckBox5)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCheckBox2)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButton2))
                            .addComponent(jLabel2))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox4)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox5)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel7.setText("Message");

        jButton1.setText("Revoke");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Remove");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Set as Prim");
        jButton4.setEnabled(false);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Add constraint");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jMenu1.setText("Connections");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Import");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Export");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Manage");
        jMenuItem4.setName("manageButton"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Task");

        jMenuItem9.setText("Manage");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Import");
        jMenuItem10.setAutoscrolls(true);
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Export");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem6.setText("User Guide");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem8.setText("IDE Logs");
        jMenuItem8.setEnabled(false);
        jMenu3.add(jMenuItem8);

        jMenuItem13.setText("Check for Updates");
        jMenuItem13.setEnabled(false);
        jMenu3.add(jMenuItem13);

        jMenuItem7.setText("About");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)))
                        .addGap(0, 25, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jButton12)
                    .addComponent(jButton18)
                    .addComponent(jButton19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        new TableSelectionPage().tableSelectionMain(null);
        dispose();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        if (!tabs.isEmpty()) {
            JTextField field = new JTextField();
            field.setToolTipText("Task's Name");
            JLabel jLabel = new JLabel("Save as...");
            taskName = String.valueOf(JOptionPane.showInputDialog(null, jLabel, "Enter Task's Name", JOptionPane.PLAIN_MESSAGE));
            if (taskName != null) {
                try {
                    ComparisonTask task = prepareTask(taskName);
                    if (new TaskHelper().saveNewTask(task)) {
                        JOptionPane.showMessageDialog(null, "Saved the task successfully...");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: problem occurred while saving the task");
                    }
                } catch (JAXBException ex) {
                    StringBuilder sb = new StringBuilder(ex.toString());
                    for (StackTraceElement ste : ex.getStackTrace()) {
                        sb.append("\n\t at ");
                        sb.append(ste);
                    }
                    String trace = sb.toString();
                    //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                    JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Saving task aborted...");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error: No Data found to be saved as a task");
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        System.out.println(canProceed);
        if (canProceed) {
            jButton17.setEnabled(false);
            new InProgressWindow(this, null, 2).setVisible(true);
        } else {
            jButton17.setEnabled(true);
            jLabel7.setText("Cannot proceed. Inputs missing : Primary Columns missing for tables:" + tablesPrimKeyIssue.toString().replace("[", "").replace("]", ""));
            jLabel7.setForeground(Color.RED);
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        new HomePage().mainHome(null);
        dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        Frame.getFrames();
        ManageTasks.manageTasksMain(columnSelectionPage);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportTasks().importTasks();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportTasks().exportTasks();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            //URL url = getClass().getClassLoader().getResource("resource/UserGuide.pdf");
            /*URL url = TableSelectionPage.class.getResource("/resource/UserGuide.pdf");

            System.out.println("URL to UserGuide: " + url.getPath());
            System.out.println(System.getProperty("java.class.path"));

            File f = new File(url.getFile());
            if (!f.exists()) {
                JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
                System.out.println("Check URL - " + url);
                url = TableSelectionPage.class.getResource("/resource");
                System.out.println("Does Resource accessible? " + new File(url.getFile()).exists());
            } else {
                //Desktop.getDesktop().open(f);
            }*/

            File jarPath = new File(ColumnSelectionPage.class.getProtectionDomain().getCodeSource().getLocation().getPath());
            String deploymentPath = jarPath.getParentFile().getAbsolutePath().replace("%20", " ");
            String pathToUserGuide = deploymentPath + "\\resource\\UserGuide.pdf";

            File userGuide = new File(pathToUserGuide);
            if (userGuide.exists()) {
                Desktop.getDesktop().open(userGuide);
            } else {
                JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
                System.out.println("Check URL - " + pathToUserGuide);
                System.out.println("Does Resource accessible? " + new File(pathToUserGuide).exists());
            }
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
            URL url = ColumnSelectionPage.class.getResource("/resource");
            System.out.println("Does Resource accessible? " + new File(url.getFile()).exists());
        } catch (IOException ex) {
            StringBuilder sb = new StringBuilder(ex.toString());
            for (StackTraceElement ste : ex.getStackTrace()) {
                sb.append("\n\t at ");
                sb.append(ste);
            }
            String trace = sb.toString();
            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
        } catch (Exception ex) {
            StringBuilder sb = new StringBuilder(ex.toString());
            for (StackTraceElement ste : ex.getStackTrace()) {
                sb.append("\n\t at ");
                sb.append(ste);
            }
            String trace = sb.toString();
            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        AboutDBComp.aboutMain();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ManageConnection.manageConnectionMain();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportConnection().importDBConnection();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportConnection().exportDBConnection();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        ManageConnection.manageConnectionMain();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    @SuppressWarnings("CallToPrintStackTrace")
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("C:\\"));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int state = chooser.showDialog(chooser, "Select");
        if (state == JFileChooser.APPROVE_OPTION) {
            try {
                outputPath = chooser.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(null, "Output path successfuly changed to " + outputPath);
                jLabel6.setText(outputPath);
                jLabel5.setText("default location (MODIFIED): ");
            } catch (HeadlessException ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            } catch (Exception ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        selectedTableColumnListModel.removeAllElements();
        String selectedTableName = jList1.getSelectedValue();
        jButton4.setEnabled(false);jButton5.setEnabled(true);
        if (!tabs.isEmpty()) {
            for (DBTable table : tabs) {
                if (table.getName().equalsIgnoreCase(selectedTableName)) {
                    if ((table.getColumnList() == null || table.getColumnList().isEmpty()) && (table.getPrimaryColumnList() == null || table.getPrimaryColumnList().isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Error: While retrieving columns for this table.");
                        break;
                    } else {
                        try {
                            if (table.getPrimaryColumnList().size() > 0) {
                                for (String column : table.getPrimaryColumnList()) {
                                    if (!selectedTableColumnListModel.contains(column)) {
                                        selectedTableColumnListModel.addElement(column);
                                    }
                                }
                            }
                            if (table.getColumnList().size() > 0) {
                                for (String column : table.getColumnList()) {
                                    if (!selectedTableColumnListModel.contains(column)) {
                                        selectedTableColumnListModel.addElement(column);
                                    }
                                }
                            }
                        } catch (NullPointerException ex) {
                            if (table.getColumnList().size() > 0) {
                                for (String column : table.getColumnList()) {
                                    if (!selectedTableColumnListModel.contains(column)) {
                                        selectedTableColumnListModel.addElement(column);
                                    }
                                }
                            }
                        } catch (Exception ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        }
                        break;

                    }
                }
            }
        }

    }//GEN-LAST:event_jList1ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<String> selectedTables = jList1.getSelectedValuesList();
        if (selectedTableListModel.size() > 1 && selectedTables.size() > 0) {
            if (!tabs.isEmpty()) {
                for (String selectedTableName : selectedTables) {
                    for (DBTable table : tabs) {
                        if (table.getName().equalsIgnoreCase(selectedTableName)) {
                            tabs.remove(table);
                            selectedTableListModel.removeElement(table.getName());
                            break;
                        }
                    }
                    for (String table : tablesPrimKeyIssue) {
                        if (table.equalsIgnoreCase(selectedTableName)) {
                            tablesPrimKeyIssue.remove(table);
                            break;
                        }
                    }
                }
                if (!tablesPrimKeyIssue.isEmpty()) {
                    jLabel7.setForeground(Color.red);
                    jLabel7.setText("Message: Primary Columns missing for tables:" + tablesPrimKeyIssue.toString().replace("[", "").replace("]", ""));
                    canProceed = false;
                } else {
                    jLabel7.setForeground(Color.black);
                    jLabel7.setText("Message: Good to proceed");
                    canProceed = true;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Cannot revoke the only table present. Please re-initialize tables by going back if needed.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String selectedTableName = jList1.getSelectedValue();
        List<String> selectedColumns = jList2.getSelectedValuesList();
        List<String> columnToPreserve = new ArrayList<>();
        boolean b = false;

        for (DBTable table : tabs) {
            if (table.getName().equalsIgnoreCase(selectedTableName)) {
                if (table.getPrimaryColumnList() != null && !table.getPrimaryColumnList().isEmpty()) {
                    columnToPreserve.addAll(table.getPrimaryColumnList());
                    b = selectedColumns.removeAll(columnToPreserve);
                    if (b) {
                        table.getColumnList().removeAll(selectedColumns);
                        for (String column : selectedColumns) {
                            selectedTableColumnListModel.removeElement(column);
                        }
                    } else {
                        int size = selectedTableColumnListModel.size();
                        if (selectedColumns.size() == size) {
                            JOptionPane.showMessageDialog(null, "All columns cannot be revoked. Please define primary columns f");
                        } else {
                            table.getColumnList().removeAll(selectedColumns);
                            for (String column : selectedColumns) {
                                selectedTableColumnListModel.removeElement(column);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Primary Columns not defined. Cannot revoke columns...");
                }
                break;
            }
        }
        if (b == true) {
            JOptionPane.showMessageDialog(null, "Columns other than Primary Key Columns have been removed");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (!jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
            if (!jCheckBox4.isSelected()) {
                jCheckBox4.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
            if (jCheckBox4.isSelected()) {
                jCheckBox4.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox4.isSelected()) {
                if (!jCheckBox1.isSelected()) {
                    jCheckBox1.setSelected(true);
                }
            } else {
                if (jCheckBox1.isSelected()) {
                    jCheckBox1.setSelected(false);
                }
            }
        } else {
            if (jCheckBox1.isSelected()) {
                jCheckBox1.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void jCheckBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox4ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox2.isSelected()) {
                if (!jCheckBox1.isSelected()) {
                    jCheckBox1.setSelected(true);
                }
            } else {
                if (jCheckBox1.isSelected()) {
                    jCheckBox1.setSelected(false);
                }
            }
        } else {
            if (jCheckBox1.isSelected()) {
                jCheckBox1.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox4ItemStateChanged

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed

    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton17MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton17MousePressed
        if (canProceed) {
            jLabel7.setText("Message: Fetching data and computing the results. It may take a while. Please wait...");
            jLabel7.setForeground(Color.BLUE);
        }
        //jButton17.setEnabled(false);
    }//GEN-LAST:event_jButton17MousePressed

    private void jButton17MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton17MouseReleased
        jButton17.setFocusPainted(false);
    }//GEN-LAST:event_jButton17MouseReleased

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        if (!buffTablesPrimKeyIssue.isEmpty()) {
            String tableName = jList1.getSelectedValue();
            if (buffTablesPrimKeyIssue.contains(tableName)) {
                jButton4.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jList2ValueChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        List<String> selectedColumns = jList2.getSelectedValuesList();
        String selectedTableName = jList1.getSelectedValue();

        if (!tabs.isEmpty() && !buffTablesPrimKeyIssue.isEmpty() && !selectedColumns.isEmpty()) {
            for (DBTable table : tabs) {
                if (table.getName().equalsIgnoreCase(selectedTableName) && buffTablesPrimKeyIssue.contains(table.getName())) {
                    table.setPrimaryColumnList(selectedColumns);
                    tablesPrimKeyIssue.remove(table.getName());
                    table.getColumnList().removeAll(selectedColumns);
                    System.out.println("Settled new primary keys for table " + tabs.get(tabs.indexOf(table)).getName() + " as " + tabs.get(tabs.indexOf(table)).getPrimaryColumnList());
                }
                if (!tablesPrimKeyIssue.isEmpty()) {
                    jLabel7.setForeground(Color.red);
                    jLabel7.setText("Message: Primary Columns missing for tables:" + tablesPrimKeyIssue.toString().replace("[", "").replace("]", ""));
                    canProceed = false;
                } else {
                    jLabel7.setForeground(Color.black);
                    jLabel7.setText("Message: Good to proceed");
                    canProceed = true;
                }
            }
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String tableName = jList1.getSelectedValue();
        String constraint = JOptionPane.showInputDialog(null, "Enter constraint in Standard SQL Query format(conditions separated with ANDs)", "Add constraint for " + tableName, JOptionPane.PLAIN_MESSAGE);
        if (tableConstraints.containsKey(tableName)) {
            tableConstraints.remove(tableName);
            if (constraint != null || constraint.length() != 0) {
                tableConstraints.put(tableName, constraint);
            }
        }else{
            if (constraint != null || constraint.length() != 0) {
                tableConstraints.put(tableName, constraint);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    @SuppressWarnings("UnusedAssignment")
    public boolean columnSelectionMain(List<SessionParameter> sp, List<String> selectedTables, ComparisonTask task) throws JAXBException, InterruptedException {
        jLabel6.setText(outputPath);
        tabs = new ArrayList<>();
        sessionParameter = sp;
        DBTable table;

        tableConstraints.clear();
        if (sp != null && selectedTables != null) {
            for (SessionParameter parameter : sp) {
                switch (parameter.getParamName().toUpperCase()) {
                    case "SOURCE_DB":
                        sourceDBName = parameter.getParamValue();
                        break;
                    case "TARGET_DB":
                        targetDBName = parameter.getParamValue();
                        break;
                    case "DATA_OPTION":
                        dataOption = parameter.getParamValue();
                        System.out.println("ColumnSelectionPage: dataOption" + dataOption);
                        break;
                    case "DATA_TYPE":
                        dataType = parameter.getParamValue();
                        System.out.println("ColumnSelectionPage: dataType" + dataType);
                        break;
                    case "SCHEMA_OPTION":
                        schemaOption = parameter.getParamValue();
                        break;
                    case "ERROR_TABLE":
                        missingTables = parameter.getParamValue();
                        break;
                    case "NEW-CONFIG":
                        wantDynamic = parameter.getParamValue();
                        break;
                    case "SOURCE_USER":
                        sourceEditedUser = parameter.getParamValue();
                        break;
                    case "TARGET_USER":
                        targetEditedUser = parameter.getParamValue();
                        break;
                    default:
                        break;
                }
            }
            if (sourceDBName != null && targetDBName != null) {
                Reference sourceRef = new ConnectionHelper().getDBReference(sourceDBName);
                System.out.println("sourceDBName incoming" + sourceDBName);
                final DBConnection sconn = new ConnectionHelper().extractDBConnection(sourceRef);
                System.out.println("Initializing Source connection for" + sourceRef.getName());
                Thread sth = new Thread() {
                    @Override
                    public void run() {
                        new ColumnSelectionPage().initializeConnection(sconn, "Source");
                    }
                };
                sth.start();
                Reference targetRef = new ConnectionHelper().getDBReference(targetDBName);
                System.out.println("targetDBName incoming" + targetDBName);
                final DBConnection tconn = new ConnectionHelper().extractDBConnection(targetRef);
                System.out.println("Initializing Target connection for" + targetRef.getName());
                Thread tth = new Thread() {
                    @Override
                    public void run() {
                        columnSelectionPage = new ColumnSelectionPage();
                        columnSelectionPage.initializeConnection(tconn, "Target");
                    }
                };
                tth.start();
                selectedTableListModel.removeAllElements();
                sth.join();
                tth.join();
                //Checking if the connections have been initialized
                if (sourceConn == null || targetConn == null) {
                    //Any of the two connections not established
                    JOptionPane.showMessageDialog(null, "Failed to establish Source/Target DB Connection. Please check the connectivity and try again.");
                    return false;
                } else {
                    if (task != null) {
                        TaskSourceObject object = task.getSourceObject();
                        for (DBTable dbt : object.getTables()) {
                            selectedTableListModel.addElement(dbt.getName());
                            tabs.add(dbt);
                        }
                        initializeColumnsForSelectedTables(sourceConn, sconn, targetConn, tconn);
                    } else {
                        for (String s : selectedTables) {
                            selectedTableListModel.addElement(s);
                            table = new DBTable();
                            table.setName(s);
                            tabs.add(table);
                            table = null;
                        }
                        initializeColumnsForSelectedTables(sourceConn, sconn, targetConn, tconn);
                    }

                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            columnSelectionPage = new ColumnSelectionPage();
                            columnSelectionPage.setVisible(true);
                        }
                    });
                }
            }
        }

        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Windows".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    StringBuilder sb = new StringBuilder(ex.toString());
                    for (StackTraceElement ste : ex.getStackTrace()) {
                        sb.append("\n\t at ");
                        sb.append(ste);
                    }
                    String trace = sb.toString();
                    //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                    JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {

        // Create and display the form 
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Windows".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ColumnSelectionPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ColumnSelectionPage().setVisible(true);
            }
        });
    }
    public static String sourceDBName, sourceDBUser, targetDBUser, targetDBName, taskName;
    private static String dataOption, schemaOption, dataType;
    private static List<DBTable> tabs = null;
    @SuppressWarnings("FieldMayBeFinal")
    private static DefaultListModel<String> selectedTableListModel = new DefaultListModel<>();
    @SuppressWarnings("FieldMayBeFinal")
    private static DefaultListModel<String> selectedTableColumnListModel = new DefaultListModel<>();
    private static String outputPath, wantDynamic = "FALSE";
    private static List<SessionParameter> sessionParameter;
    private static Connection sourceConn, targetConn;
    static String sourceEditedUser = null, targetEditedUser = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("UnusedAssignment")
    public void initializeColumnsForSelectedTables(final Connection c, final DBConnection conn, Connection targetConn, DBConnection tconn) {
        String userName = conn.getUsername().toUpperCase();
        if (userName.startsWith("CONSULTA") && sourceEditedUser == null) {
            if (conn.getConnectionName().toUpperCase().contains("PROD")) {
                userName = "PRD1REFWAIT";
            } else if (conn.getConnectionName().toUpperCase().contains("PRD1PCOWNB")) {
                userName = "PRD1PCOWNB";
            } else if (conn.getConnectionName().toUpperCase().contains("PRD1CODEOWNB")) {
                userName = "PRD1CODEOWNB";
            } else if (conn.getConnectionName().toUpperCase().contains("PRD1SEOWNB")) {
                userName = "PRD1SEOWNB";
            } else if (conn.getConnectionName().toUpperCase().contains("PRD1REFOWNB")) {
                userName = "PRD1REFOWNB";
            } else if (conn.getConnectionName().toUpperCase().contains("PRD1REFWAIT")) {
                userName = "PRD1REFWAIT";
            } else if (conn.getConnectionName().toUpperCase().contains("SAREF2_PET")) {
                userName = "SAREF2_PET";
            } else if (conn.getConnectionName().toUpperCase().contains(" PET")) {
                userName = "PET1REFWAIT";
            } else if (conn.getConnectionName().toUpperCase().contains("UAT")) {
                String uatNum = conn.getConnectionName().toUpperCase().split("UAT")[1].replace("[a-zA-Z]", "");
                userName = "NETAPP" + uatNum;
            }
        } else if (sourceEditedUser != null) {
            userName = sourceEditedUser.toUpperCase();
        }

        String targetUser = tconn.getUsername().toUpperCase();
        if (targetUser.startsWith("CONSULTA") && targetEditedUser == null) {
            if (tconn.getConnectionName().toUpperCase().contains("PROD")) {
                System.out.println("Setting username PRD1REFWAIT");
                targetUser = "PRD1REFWAIT";
            } else if (tconn.getConnectionName().toUpperCase().contains("PRD1PCOWNB")) {
                System.out.println("Setting username PRD1PCOWNB");
                targetUser = "PRD1PCOWNB";
            } else if (tconn.getConnectionName().toUpperCase().contains("PRD1CODEOWNB")) {
                System.out.println("Setting username PRD1CODEOWNB");
                targetUser = "PRD1CODEOWNB";
            } else if (tconn.getConnectionName().toUpperCase().contains("PRD1SEOWNB")) {
                System.out.println("Setting username PRD1SEOWNB");
                targetUser = "PRD1SEOWNB";
            } else if (tconn.getConnectionName().toUpperCase().contains("PRD1REFOWNB")) {
                System.out.println("Setting username PRD1REFOWNB");
                targetUser = "PRD1REFOWNB";
            } else if (tconn.getConnectionName().toUpperCase().contains("PRD1REFWAIT")) {
                System.out.println("Setting username PRD1REFWAIT");
                targetUser = "PRD1REFWAIT";
            } else if (tconn.getConnectionName().toUpperCase().contains("SAREF2_PET")) {
                System.out.println("Setting username SAREF2_PET");
                targetUser = "SAREF2_PET";
            } else if (tconn.getConnectionName().toUpperCase().contains(" PET")) {
                System.out.println("Setting username PET1REFWAIT");
                targetUser = "PET1REFWAIT";
            } else if (tconn.getConnectionName().toUpperCase().contains("UAT")) {
                String uatNum = conn.getConnectionName().toUpperCase().split("UAT")[1].replace("[a-zA-Z]", "");
                System.out.println("Setting username NETAPP" + uatNum);
                targetUser = "NETAPP" + uatNum;
            }
        } else if (targetEditedUser != null) {
            targetUser = targetEditedUser.toUpperCase();
        }

        tablesPrimKeyIssue.clear();
        buffTablesPrimKeyIssue.clear();
        final String tUser = targetUser;
        final String User = userName;
        jLabel7.setForeground(Color.black);
        DatabaseHelper helper = new DatabaseHelper();

        System.out.println(DBDetailHelper.checkIfDBSaved(sourceDBName, User) + " " + wantDynamic.equals("FALSE"));
        if (DBDetailHelper.checkIfDBSaved(sourceDBName, User) && wantDynamic.equals("FALSE")) {
            List<DBTable> tables = DBDetailHelper.getTables(sourceDBName, User, dataType);
            //helper.initializeClobDataFromSavedConfig(c, tables, User);
            for (DBTable dbt : tables) {
                for (DBTable table : tabs) {
                    if (dbt.getName().equals(table.getName())) {
                        System.out.println("Fetching columns for Table " + table.getName() + " from saved configuration");
                        table.setPrimaryColumnList(dbt.getPrimaryColumnList());
                        table.setColumnList(dbt.getColumnList());
                    }
                }
                //helper.initializeClobDataFromSavedConfig(null, dbt.getName());
            }

        }

        jLabel7.setText("Message: Initializing Columns for the tables. Please wait...");
        if (c != null) {
            // Change Start
            Set<Integer> arr1 = new HashSet<>(), arr2 = new HashSet<>(), arr3 = new HashSet<>(), arr4 = new HashSet<>();
            for (int i = 0; i < tabs.size(); i++) {
                switch (i % 4) {
                    case 0:
                        arr1.add(i);
                        break;
                    case 1:
                        arr2.add(i);
                        break;
                    case 2:
                        arr3.add(i);
                        break;
                    default:
                        arr4.add(i);
                        break;
                }
            }

            final Set<Integer> ar1 = new HashSet<>(arr1), ar2 = new HashSet<>(arr2), ar3 = new HashSet<>(arr3), ar4 = new HashSet<>(arr4);
            long s = System.currentTimeMillis();
            boolean flatData = false;
            if (dataType.equalsIgnoreCase("NON-CLOB")) {
                flatData = true;
            }
            final boolean onlyFlatColumns = flatData;

            Thread th1 = new Thread() {
                @Override
                @SuppressWarnings("element-type-mismatch")
                public void run() {
                    @SuppressWarnings("UnusedAssignment")
                    List<String> primKeys = new ArrayList<>();
                    for (Integer i : ar1) {
                        try {
                            if (tabs.get(i).getColumnList() == null || tabs.get(i).getPrimaryColumnList() == null) {
                                System.out.println("Fetching columns for Table " + tabs.get(i).getName());
                                List<String> columnList = DatabaseHelper.getColumnList(c, tabs.get(i).getName(), User, onlyFlatColumns);
                                if (columnList == null || columnList.isEmpty()) {
                                    selectedTableListModel.removeElement(tabs.get(i).getName());
                                    tabs.remove(i);
                                } else {
                                    primKeys = DatabaseHelper.getPrimaryKeys(c, tabs.get(i).getName());
                                    if (primKeys != null && !primKeys.isEmpty()) {
                                        tabs.get(i).setPrimaryColumnList(primKeys);
                                        columnList.removeAll(primKeys);
                                        tabs.get(i).setColumnList(columnList);
                                        tablesToBeUpdated.add(tabs.get(i));
                                    } else {
                                        tablesPrimKeyIssue.add(tabs.get(i).getName());
                                        buffTablesPrimKeyIssue.add(tabs.get(i).getName());
                                        System.out.println("Primary columns does not exists for this table.");
                                        tabs.get(i).setColumnList(columnList);
                                    }
                                }
                            }
                            System.out.println("Table's " + tabs.get(i).getName() + " Columns:" + tabs.get(i).getColumnList());
                            System.out.println("Table's " + tabs.get(i).getName() + " Primary Columns:" + tabs.get(i).getPrimaryColumnList());
                            tableCount++;
                            System.out.println("Completed fetching columns for " + tableCount + " tables");
                        } catch (SQLException ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        } catch (Exception ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        }
                    }
                }
            };
            th1.start();
            Thread th2 = new Thread() {
                @Override
                @SuppressWarnings("element-type-mismatch")
                public void run() {
                    @SuppressWarnings("UnusedAssignment")
                    List<String> primKeys = new ArrayList<>();
                    for (Integer i : ar2) {
                        try {
                            if (tabs.get(i).getColumnList() == null || tabs.get(i).getPrimaryColumnList() == null) {
                                System.out.println("Fetching columns for Table " + tabs.get(i).getName());
                                List<String> columnList = DatabaseHelper.getColumnList(c, tabs.get(i).getName(), User, onlyFlatColumns);
                                if (columnList == null || columnList.isEmpty()) {
                                    selectedTableListModel.removeElement(tabs.get(i).getName());
                                    tabs.remove(i);
                                } else {
                                    primKeys = DatabaseHelper.getPrimaryKeys(c, tabs.get(i).getName());
                                    if (primKeys != null && !primKeys.isEmpty()) {
                                        tabs.get(i).setPrimaryColumnList(primKeys);
                                        columnList.removeAll(primKeys);
                                        tabs.get(i).setColumnList(columnList);
                                        tablesToBeUpdated.add(tabs.get(i));
                                    } else {
                                        tablesPrimKeyIssue.add(tabs.get(i).getName());
                                        buffTablesPrimKeyIssue.add(tabs.get(i).getName());
                                        System.out.println("Primary columns does not exists for this table.");
                                        tabs.get(i).setColumnList(columnList);
                                    }
                                }
                            }
                            System.out.println("Table's " + tabs.get(i).getName() + " Columns:" + tabs.get(i).getColumnList());
                            System.out.println("Table's " + tabs.get(i).getName() + " Primary Columns:" + tabs.get(i).getPrimaryColumnList());
                            tableCount++;
                            System.out.println("Completed fetching columns for " + tableCount + " tables");
                        } catch (SQLException ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        } catch (Exception ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        }

                    }
                }
            };
            th2.start();
            Thread th3 = new Thread() {
                @Override
                @SuppressWarnings("element-type-mismatch")
                public void run() {
                    @SuppressWarnings("UnusedAssignment")
                    List<String> primKeys = new ArrayList<>();
                    for (Integer i : ar3) {
                        try {
                            if (tabs.get(i).getColumnList() == null || tabs.get(i).getPrimaryColumnList() == null) {
                                System.out.println("Fetching columns for Table " + tabs.get(i).getName());
                                List<String> columnList = DatabaseHelper.getColumnList(c, tabs.get(i).getName(), User, onlyFlatColumns);
                                if (columnList == null || columnList.isEmpty()) {
                                    selectedTableListModel.removeElement(tabs.get(i).getName());
                                    tabs.remove(i);
                                } else {
                                    primKeys = DatabaseHelper.getPrimaryKeys(c, tabs.get(i).getName());
                                    if (primKeys != null && !primKeys.isEmpty()) {
                                        tabs.get(i).setPrimaryColumnList(primKeys);
                                        columnList.removeAll(primKeys);
                                        tabs.get(i).setColumnList(columnList);
                                        tablesToBeUpdated.add(tabs.get(i));
                                    } else {
                                        tablesPrimKeyIssue.add(tabs.get(i).getName());
                                        buffTablesPrimKeyIssue.add(tabs.get(i).getName());
                                        System.out.println("Primary columns does not exists for this table.");
                                        tabs.get(i).setColumnList(columnList);
                                    }
                                }
                            }
                        } catch (SQLException ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        } catch (Exception ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        }
                        System.out.println("Table's " + tabs.get(i).getName() + " Columns:" + tabs.get(i).getColumnList());
                        System.out.println("Table's " + tabs.get(i).getName() + " Primary Columns:" + tabs.get(i).getPrimaryColumnList());
                        tableCount++;
                        System.out.println("Completed fetching columns for " + tableCount + " tables");
                    }
                }
            };
            th3.start();
            Thread th4 = new Thread() {
                @Override
                @SuppressWarnings("element-type-mismatch")
                public void run() {
                    @SuppressWarnings("UnusedAssignment")
                    List<String> primKeys = new ArrayList<>();
                    for (Integer i : ar4) {
                        try {
                            if (tabs.get(i).getColumnList() == null || tabs.get(i).getPrimaryColumnList() == null) {
                                System.out.println("Fetching columns for Table " + tabs.get(i).getName());
                                List<String> columnList = DatabaseHelper.getColumnList(c, tabs.get(i).getName(), User, onlyFlatColumns);
                                if (columnList == null || columnList.isEmpty()) {
                                    selectedTableListModel.removeElement(tabs.get(i).getName());
                                    tabs.remove(i);
                                } else {
                                    primKeys = DatabaseHelper.getPrimaryKeys(c, tabs.get(i).getName());
                                    if (primKeys != null && !primKeys.isEmpty()) {
                                        tabs.get(i).setPrimaryColumnList(primKeys);
                                        columnList.removeAll(primKeys);
                                        tabs.get(i).setColumnList(columnList);
                                        tablesToBeUpdated.add(tabs.get(i));
                                    } else {
                                        tablesPrimKeyIssue.add(tabs.get(i).getName());
                                        buffTablesPrimKeyIssue.add(tabs.get(i).getName());
                                        System.out.println("Primary columns does not exists for this table.");
                                        tabs.get(i).setColumnList(columnList);
                                        //tabs.get(i).setPrimaryColumnList(primKeys);
                                    }
                                }
                            }
                        } catch (SQLException ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        } catch (Exception ex) {
                            StringBuilder sb = new StringBuilder(ex.toString());
                            for (StackTraceElement ste : ex.getStackTrace()) {
                                sb.append("\n\t at ");
                                sb.append(ste);
                            }
                            String trace = sb.toString();
                            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
                        }
                        System.out.println("Table's " + tabs.get(i).getName() + " Columns:" + tabs.get(i).getColumnList());
                        System.out.println("Table's " + tabs.get(i).getName() + " Primary Columns:" + tabs.get(i).getPrimaryColumnList());
                        tableCount++;
                        System.out.println("Completed fetching columns for " + tableCount + " tables");
                    }
                }
            };
            th4.start();
            // Change end
            /*List<String> columnList = DatabaseHelper.getColumnList(c, tabs.get(i).getName(), conn.getUsername());
            
            tabs.get(i).setColumnList(columnList);
            prim = DatabaseHelper.getPrimaryKeys(c, tabs.get(i).getName());
            if (prim != null) {
            primaryKeys.addAll(prim);
            }*/
            try {
                th1.join();
                th2.join();
                th3.join();
                th4.join();
                long t = s - (System.currentTimeMillis());
                System.out.println(TimeUnit.MILLISECONDS.toSeconds(t) + "secs taken to populate the columns of all tables");
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        System.out.println("Calling saveColumns");
                        DBDetailHelper.saveColumns(sourceDBName, User, tablesToBeUpdated, dataType);
                        DBDetailHelper.saveColumns(targetDBName, tUser, tablesToBeUpdated, dataType);
                    }
                });
            } catch (InterruptedException ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            } catch (Exception ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            } finally {
                if (c != null) {
                    //c.close();
                }
            }

        } else {
            jLabel7.setForeground(Color.red);
            jLabel7.setText("Error: Source/Target Connection not established");
        }
        jButton17.setEnabled(true);
    }

    public void initializeConnection(DBConnection conn, String c) {
        try {

            if (c.equalsIgnoreCase("target")) {
                targetConn = new ConnectionProvider().getODSConnection(conn);
            } else if (c.equalsIgnoreCase("Source")) {
                sourceConn = new ConnectionProvider().getODSConnection(conn);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringBuilder sb = new StringBuilder(ex.toString());
            for (StackTraceElement ste : ex.getStackTrace()) {
                sb.append("\n\t at ");
                sb.append(ste);
            }
            String trace = sb.toString();
            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            jLabel7.setText("Error Occurred while fetching data: " + ex.getLocalizedMessage());
            jLabel7.setForeground(Color.red);
        } catch (Exception ex) {
            StringBuilder sb = new StringBuilder(ex.toString());
            for (StackTraceElement ste : ex.getStackTrace()) {
                sb.append("\n\t at ");
                sb.append(ste);
            }
            String trace = sb.toString();
            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
            JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
        }
    }

    private ComparisonTask prepareTask(String taskName) {
        TaskSourceObject sourceObject = new TaskSourceObject();
        sourceObject.setTables(tabs);
        TaskTargetObject targetObject = new TaskTargetObject();
        targetObject.setTables(tabs);
        for (SessionParameter sp : sessionParameter) {
            switch (sp.getParamName().toUpperCase()) {
                case "SOURCEDBUSER":
                    sourceObject.setOwner(sp.getParamValue());
                    break;
                case "TARGETDBUSER":
                    targetObject.setOwner(sp.getParamValue());
                    break;
                case "SOURCE_USER":
                    sourceObject.setOwner(sp.getParamValue());
                    break;
                case "TARGET_USER":
                    targetObject.setOwner(sp.getParamValue());
                    break;
                case "DATA_OPTION":
                    dataOption = sp.getParamValue();
                    System.out.println("ColumnSelectionPage: dataOption" + dataOption);
                    break;
                case "DATA_TYPE":
                    dataType = sp.getParamValue();
                    System.out.println("ColumnSelectionPage: dataType" + dataType);
                    break;
                case "SCHEMA_OPTION":
                    schemaOption = sp.getParamValue();
                    break;
                default:
                    break;
            }
            if (sp.getParamName().equalsIgnoreCase("sourceDBUser")) {
                sourceObject.setOwner(sp.getParamValue());
            }
            if (sp.getParamName().equalsIgnoreCase("targetDBUser")) {
                targetObject.setOwner(sp.getParamValue());
            }
        }
        if (taskName == null) {
            taskName = "Task_" + new Date(System.currentTimeMillis()).toString();
        }
        ComparisonTask comparisonTask = new ComparisonTask();
        comparisonTask.setName(taskName);
        comparisonTask.setDataType(dataType);
        comparisonTask.setDataOption(dataOption);
        comparisonTask.setLastModifiedTime(String.valueOf(new Date(System.currentTimeMillis())));
        comparisonTask.setSourceObject(sourceObject);
        comparisonTask.setTargetObject(targetObject);
        comparisonTask.setSourceDBName(sourceDBName);
        comparisonTask.setTargetDBName(targetDBName);
        return comparisonTask;
    }

    public void loadComparisonData() {
        System.out.println("Inside loadComparisonData");
        jButton17.setEnabled(false);
        jLabel7.setText("Message:");
        jLabel7.setForeground(Color.black);
        jLabel3.setForeground(Color.black);
        ComparisonTask task = prepareTask(taskName);
        String outputFileFormat = null;
        if (jRadioButton1.isSelected() && jRadioButton1.isEnabled()) {
            outputFileFormat = "HTML";
        } else if (jRadioButton2.isSelected() && jRadioButton2.isEnabled()) {
            outputFileFormat = "TEXT";
        } else {
            outputFileFormat = "EXCEL";
        }
        //System.out.println("outputFileFormat:" + outputFileFormat);
        String actionUnique, actiondifference;
        if (jCheckBox2.isSelected() && jCheckBox4.isSelected()) {
            actionUnique = "Both";
        } else if (jCheckBox2.isSelected() && !jCheckBox4.isSelected()) {
            actionUnique = "Source";
        } else if (!jCheckBox2.isSelected() && jCheckBox4.isSelected()) {
            actionUnique = "Target";
        } else {
            actionUnique = "None";
        }

        actiondifference = "All";
        /*if (jCheckBox3.isSelected() && jCheckBox5.isSelected()) {
            actiondifference = "All";
        } else if (jCheckBox3.isSelected()) {
            actiondifference = "only minor";
        } else {
            actiondifference = "None";
        }*/

        if (actionUnique.equals("None") && actiondifference.equals("None")) {
            jLabel7.setText("Error: Comparison Criteria is missing. Please specify atleast one criteria to be reported.");
            jLabel7.setForeground(Color.red);
            jLabel3.setForeground(Color.red);
        } else if (sourceConn == null || targetConn == null) {
            jLabel7.setText("Error: DB Connections not initialized. Please check DB connectivity and try again.");
            jLabel7.setForeground(Color.red);
        } else {
            try {
                long starttime = System.currentTimeMillis();
                if (new DataOperation().getComparisonData(task, sourceConn, targetConn, outputFileFormat, actionUnique, actiondifference, dataType, outputPath, missingTables, tableConstraints)) {
                    if (outputFileFormat.equals("TEXT")) {
                        int response = JOptionPane.showOptionDialog(null, "Results have been stored in file at " + outputPath + "...", "Message", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Open", "Cancel"}, JOptionPane.NO_OPTION);
                        if (response == 0) {
                            String fileName = DataOperation.returnDetailedReport();
                            if (fileName != null) {
                                Desktop.getDesktop().open(new File(fileName));
                                fileName = DataOperation.returnFinalReport();
                                if (fileName != null) {
                                    Desktop.getDesktop().open(new File(fileName));
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Error occurred while opening results. For more details, check report files " + outputPath + "...");
                                System.out.println("Final Report not found.");
                            }
                        }
                    } else if (outputFileFormat.equals("HTML")) {
                        int response = JOptionPane.showOptionDialog(null, "Report has been generated", "Message", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Open", "Cancel"}, JOptionPane.NO_OPTION);
                        boolean fileFound = false;
                        if (response == 0) {
                            for (File f : new File(outputPath + "\\HTML-Reports").listFiles()) {
                                if (f.getName().toUpperCase().startsWith("FINAL REPORT")) {
                                    Desktop.getDesktop().open(f);
                                    fileFound = true;
                                    break;
                                }
                            }
                            if (!fileFound) {
                                JOptionPane.showMessageDialog(null, "No differences found. For more details, check report files " + outputPath + "...");
                                System.out.println("Final Report not found. No differences found.");
                                String fileName = DataOperation.returnFinalReport();
                                if (fileName != null) {
                                    Desktop.getDesktop().open(new File(fileName));
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Data Comparison failed due to some errors on selected tables. Please check the reports...");
                    String fileName = DataOperation.returnDetailedReport();
                    if (fileName != null) {
                        Desktop.getDesktop().open(new File(fileName));
                        fileName = DataOperation.returnFinalReport();
                        if (fileName != null) {
                            Desktop.getDesktop().open(new File(fileName));
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error occurred while opening results. For more details, check report files " + outputPath + "...");
                        System.out.println("Final Report not found.");
                    }
                }
                System.out.println("TOTAL TIME TAKEN :" + TimeUnit.MILLISECONDS.toSeconds(starttime - System.currentTimeMillis()));
            } catch (HeadlessException ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ". ");
            } catch (IOException ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            } catch (Exception ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage() + ".  ");
            }
            jButton17.setEnabled(true);
            jButton17.setFocusPainted(true);

            jLabel7.setText("Message:");
            jLabel7.setForeground(Color.black);
        }
    }

    public static void valueUpdate(int count, int totalCount, String type) {
        String jLabel7Text = jLabel7.getText();
        if (type.equals("source")) {
            if (jLabel7Text.contains("Source : ")) {
                String[] sourceData = {"", ""};
                if (jLabel7Text.contains("Target : ")) {
                    sourceData = jLabel7Text.split("Target");
                    sourceData[0] = "Fetching Records: Source : " + count + " records done out of " + totalCount + ".";
                    jLabel7.setText(sourceData[0] + " Target" + sourceData[1]);
                } else {
                    jLabel7.setText("Fetching Records: Source : " + count + " records done out of " + totalCount + ".");
                }
            } else {
                jLabel7.setText("Fetching Records: Source : " + count + " records done out of " + totalCount + ".");
            }
        } else {
            String[] targetData = {"", ""};
            if (jLabel7Text.contains("Target : ")) {
                targetData = jLabel7Text.split("Target");
                targetData[1] = "Target : " + count + " records done out of " + totalCount + ".";
                jLabel7.setText(targetData[0] + "" + targetData[1]);
            } else {
                jLabel7.setText(jLabel7Text + "Target : " + count + " records done out of " + totalCount + ".");
            }
        }

    }
}
