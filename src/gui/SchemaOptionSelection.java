/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import XMLHelper.ConnectionHelper;
import XMLHelper.DatabaseDetailHelper;
import XMLHelper.TaskHelper;
import componentBean.ComparisonTask;
import componentBean.DBConnection;
import componentBean.DBTable;
import componentBean.DatabaseObjects;
import componentBean.SessionParameter;
import componentBean.TaskSourceObject;
import componentBean.TaskTargetObject;
import dbHelper.ConnectionProvider;
import dbHelper.DataOperation;
import dbHelper.DatabaseHelper;
import dbHelper.SchemaOperation;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.bind.JAXBException;
import xmlBean.Reference;

/**
 *
 * @author nimeshd
 */
public class SchemaOptionSelection extends javax.swing.JFrame {

    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    SimpleDateFormat sdfTime = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
    String directory = System.getProperty("user.home") + "\\Desktop\\DBComp-Results";
    public static int tableCount = 0;
    static String missingTables = null;
    DatabaseDetailHelper DBDetailHelper = new DatabaseDetailHelper();
    static boolean canProceed = true;
    static DatabaseObjects databaseObjects;
    String sourceUser, targetUser;
    private static SchemaOptionSelection schemaOptionSelection;

    /**
     * Creates new form NewJFrame
     */
    public SchemaOptionSelection() {
        File f = new File(directory);
        if (!f.exists()) {
            f.mkdir();
        }
        System.out.println("------" + this.getName());
        outputPath = directory;
        initComponents();
        jLabel14.setText(sourceDBName);
        jLabel13.setText(targetDBName);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButton12 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Jupiter - Data Comparer Tool");
        setLocation(new java.awt.Point(300, 150));
        setName("tableSelectionFrame"); // NOI18N

        jButton12.setText("Cancel");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton17.setText("Finish");
        jButton17.setSelected(true);
        jButton17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton17MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton17MouseReleased(evt);
            }
        });
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Back");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(153, 153, 153));
        jButton19.setText("Save as New Task");
        jButton19.setEnabled(false);
        jButton19.setFocusPainted(false);
        jButton19.setName("next"); // NOI18N
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jLabel1.setText("This is to filter out environment specific columns to avoid unnecessary differences. You can restrict process for important data columns only.");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configure Output"));

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Show unique data ");
        jCheckBox1.setActionCommand("BothUnique");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Existing only in source");
        jCheckBox2.setActionCommand("SourceUnique");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Show difference of both");
        jCheckBox3.setActionCommand("Difference");

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Existing only in target");
        jCheckBox4.setActionCommand("TargetUnique");
        jCheckBox4.setEnabled(false);
        jCheckBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox4ItemStateChanged(evt);
            }
        });
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("HTML");
        jRadioButton1.setEnabled(false);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Text");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Excel");
        jRadioButton3.setEnabled(false);

        jLabel2.setText("Output Format:");

        jLabel3.setText("Criteria:");

        jLabel4.setText("The comparison result will be stored under");

        jLabel5.setText("default location: ");

        jLabel6.setText(outputPath);

        jButton2.setText("Change Output Location");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jRadioButton1)
                .addGap(56, 56, 56)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton3)
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jCheckBox3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox2)))
                            .addComponent(jLabel2)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(22, 22, 22))
        );

        jLabel7.setText("Message");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("DDL Comparison Options"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Views, Triggers, Indexes"));

        jLabel8.setText("Compare based on:");

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setText("Definition");
        jRadioButton4.setEnabled(false);

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setSelected(true);
        jRadioButton5.setText("Name");

        jCheckBox5.setSelected(true);
        jCheckBox5.setText("Show name differences");
        jCheckBox5.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton5)
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox5)
                    .addComponent(jRadioButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox5)
                .addGap(26, 26, 26))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Database Tables"));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Comparison Parameters"));

        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Set as default");
        jCheckBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox6ItemStateChanged(evt);
            }
        });

        jCheckBox7.setSelected(true);
        jCheckBox7.setText("Is Nullable");
        jCheckBox7.setToolTipText("Data type of the column");
        jCheckBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox7ItemStateChanged(evt);
            }
        });

        jCheckBox8.setSelected(true);
        jCheckBox8.setText("Data Length");
        jCheckBox8.setToolTipText("Length of the column (in bytes)");
        jCheckBox8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox8ItemStateChanged(evt);
            }
        });

        jCheckBox9.setSelected(true);
        jCheckBox9.setText("Data Precision");
        jCheckBox9.setToolTipText("Decimal precision for NUMBER datatype; binary precision for FLOAT datatype, null for all other datatypes");
        jCheckBox9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox9ItemStateChanged(evt);
            }
        });

        jCheckBox10.setSelected(true);
        jCheckBox10.setText("Default Length");
        jCheckBox10.setToolTipText("Length of default value for the column");
        jCheckBox10.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox10ItemStateChanged(evt);
            }
        });

        jCheckBox11.setSelected(true);
        jCheckBox11.setText("Data Scale");
        jCheckBox11.setToolTipText("Digits to right of decimal point in a number");
        jCheckBox11.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox11ItemStateChanged(evt);
            }
        });

        jCheckBox12.setSelected(true);
        jCheckBox12.setText("Data Default");
        jCheckBox12.setToolTipText("Default value for the column");
        jCheckBox12.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox12ItemStateChanged(evt);
            }
        });

        jCheckBox13.setSelected(true);
        jCheckBox13.setText("Char Length");
        jCheckBox13.setToolTipText("Displays the length of the column in characters. This value only applies to the CHAR, VARCHAR2, NCHAR, NVARCHAR datatypes.");
        jCheckBox13.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox13ItemStateChanged(evt);
            }
        });

        jCheckBox14.setSelected(true);
        jCheckBox14.setText("Low Value");
        jCheckBox14.setToolTipText("Low value in the column");
        jCheckBox14.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox14ItemStateChanged(evt);
            }
        });

        jCheckBox15.setSelected(true);
        jCheckBox15.setText("High Value");
        jCheckBox15.setToolTipText("High value in the column");
        jCheckBox15.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox15ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox6)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox7)
                            .addComponent(jCheckBox8)
                            .addComponent(jCheckBox9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox11)
                            .addComponent(jCheckBox12)
                            .addComponent(jCheckBox10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox14)
                            .addComponent(jCheckBox15)
                            .addComponent(jCheckBox13))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jCheckBox11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox10))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jCheckBox6)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox9))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jCheckBox14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox13)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel9.setText("These are DB requirement specific parameters which may or may not be ");

        jLabel10.setText("important for the comparison. You can learn more about it from tool tips.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel11.setText("Source:");

        jLabel12.setText("Target:");

        jLabel13.setText("jLabel13");

        jLabel14.setText("jLabel13");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Connections");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Import");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Export");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Manage");
        jMenuItem4.setName("manageButton"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Task");

        jMenuItem9.setText("Manage");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Import");
        jMenuItem10.setAutoscrolls(true);
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Export");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem6.setText("User Guide");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem8.setText("IDE Logs");
        jMenuItem8.setEnabled(false);
        jMenu3.add(jMenuItem8);

        jMenuItem13.setText("Check for Updates");
        jMenu3.add(jMenuItem13);

        jMenuItem7.setText("About");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jButton12)
                    .addComponent(jButton18)
                    .addComponent(jButton19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        new TableSelectionPage().tableSelectionMain(null);
        dispose();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        if (!tabs.isEmpty()) {
            JTextField field = new JTextField();
            field.setToolTipText("Task's Name");
            JLabel jLabel = new JLabel("Save as...");
            taskName = String.valueOf(JOptionPane.showInputDialog(null, jLabel, "Enter Task's Name", JOptionPane.PLAIN_MESSAGE));
            if (taskName != null) {
                try {
                    ComparisonTask task = prepareTask(taskName);
                    if (new TaskHelper().saveNewTask(task)) {
                        JOptionPane.showMessageDialog(null, "Saved the task successfully...");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: problem occurred while saving the task");
                    }
                } catch (JAXBException ex) {
                    Logger.getLogger(DatabaseHelper.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Saving task aborted...");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error: No Data found to be saved as a task");
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        if (canProceed) {
            new InProgressWindow(this, null, 2).setVisible(true);
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        new HomePage().mainHome(null);
        dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        Frame.getFrames();
        ManageTasks.manageTasksMain(schemaOptionSelection);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportTasks().importTasks();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportTasks().exportTasks();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            //URL url = getClass().getClassLoader().getResource("resource/UserGuide.pdf");
            /*URL url = TableSelectionPage.class.getResource("/resource/UserGuide.pdf");

            System.out.println("URL to UserGuide: " + url.getPath());
            System.out.println(System.getProperty("java.class.path"));

            File f = new File(url.getFile());
            if (!f.exists()) {
                JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
                System.out.println("Check URL - " + url);
                url = TableSelectionPage.class.getResource("/resource");
                System.out.println("Does Resource accessible? " + new File(url.getFile()).exists());
            } else {
                //Desktop.getDesktop().open(f);
            }*/

            File jarPath = new File(SchemaOptionSelection.class.getProtectionDomain().getCodeSource().getLocation().getPath());
            String deploymentPath = jarPath.getParentFile().getAbsolutePath().replace("%20", " ");
            String pathToUserGuide = deploymentPath + "\\resource\\UserGuide.pdf";

            File userGuide = new File(pathToUserGuide);
            if (userGuide.exists()) {
                Desktop.getDesktop().open(userGuide);
            } else {
                JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
                System.out.println("Check URL - " + pathToUserGuide);
                System.out.println("Does Resource accessible? " + new File(pathToUserGuide).exists());
            }
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
            URL url = SchemaOptionSelection.class.getResource("/resource");
            System.out.println("Does Resource accessible? " + new File(url.getFile()).exists());
        } catch (IOException ex) {
            System.out.println("Error occurred: " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        AboutDBComp.aboutMain();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ManageConnection.manageConnectionMain();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportConnection().importDBConnection();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        new XMLHelper.ImportExportConnection().exportDBConnection();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        ManageConnection.manageConnectionMain();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    @SuppressWarnings("CallToPrintStackTrace")
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("C:\\"));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int state = chooser.showDialog(chooser, "Select");
        if (state == JFileChooser.APPROVE_OPTION) {
            try {
                outputPath = chooser.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(null, "Output path successfuly changed to " + outputPath);
                jLabel6.setText(outputPath);
                jLabel5.setText("default location (MODIFIED): ");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(null, "Error occurred while changing the path. Please try again or proceed with existing one");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            jCheckBox2.setSelected(true);
            jCheckBox4.setSelected(true);
        }
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            jCheckBox2.setSelected(false);
            jCheckBox4.setSelected(false);
        }

    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged

    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void jCheckBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox4ItemStateChanged

    }//GEN-LAST:event_jCheckBox4ItemStateChanged

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed

    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton17MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton17MousePressed
        jLabel7.setText("Message: Fetching data and computing the results. It may take a while. Please wait...");
        jLabel7.setForeground(Color.BLUE);
        //jButton17.setEnabled(false);
    }//GEN-LAST:event_jButton17MousePressed

    private void jButton17MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton17MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17MouseReleased

    private void jCheckBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox6ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(!jCheckBox7.isSelected()){
                jCheckBox7.setSelected(true);
            }if(!jCheckBox8.isSelected()){
                jCheckBox8.setSelected(true);
            }if(!jCheckBox9.isSelected()){
                jCheckBox9.setSelected(true);
            }if(!jCheckBox10.isSelected()){
                jCheckBox10.setSelected(true);
            }if(!jCheckBox11.isSelected()){
                jCheckBox11.setSelected(true);
            }if(!jCheckBox12.isSelected()){
                jCheckBox12.setSelected(true);
            }if(!jCheckBox13.isSelected()){
                jCheckBox13.setSelected(true);
            }if(!jCheckBox14.isSelected()){
                jCheckBox14.setSelected(true);
            }if(!jCheckBox15.isSelected()){
                jCheckBox15.setSelected(true);
            }
        }else{
            if(jCheckBox7.isSelected()){
                jCheckBox7.setSelected(false);
            }if(jCheckBox8.isSelected()){
                jCheckBox8.setSelected(false);
            }if(jCheckBox9.isSelected()){
                jCheckBox9.setSelected(false);
            }if(jCheckBox10.isSelected()){
                jCheckBox10.setSelected(false);
            }if(jCheckBox11.isSelected()){
                jCheckBox11.setSelected(false);
            }if(jCheckBox12.isSelected()){
                jCheckBox12.setSelected(false);
            }if(jCheckBox13.isSelected()){
                jCheckBox13.setSelected(false);
            }if(jCheckBox14.isSelected()){
                jCheckBox14.setSelected(false);
            }if(jCheckBox15.isSelected()){
                jCheckBox15.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox6ItemStateChanged

    private void jCheckBox7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox7ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox7ItemStateChanged

    private void jCheckBox11ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox11ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox11ItemStateChanged

    private void jCheckBox14ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox14ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox14ItemStateChanged

    private void jCheckBox15ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox15ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox15ItemStateChanged

    private void jCheckBox13ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox13ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox13ItemStateChanged

    private void jCheckBox10ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox10ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox10ItemStateChanged

    private void jCheckBox12ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox12ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox12ItemStateChanged

    private void jCheckBox8ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox8ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox8ItemStateChanged

    private void jCheckBox9ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox9ItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            if(jCheckBox6.isSelected()){
                jCheckBox6.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox9ItemStateChanged

    @SuppressWarnings("UnusedAssignment")
    public boolean schemaSelectionMain(List<SessionParameter> sp, DatabaseObjects dBObjects, ComparisonTask task) {
        jLabel6.setText(outputPath);
        tabs = new ArrayList<>();
        sessionParameter = sp;
        DBTable table;
        System.out.println("Received Database Objects : " + dBObjects);
        databaseObjects = dBObjects;

        if (sp != null && dBObjects != null) {
            for (SessionParameter parameter : sp) {
                switch (parameter.getParamName().toUpperCase()) {
                    case "SOURCE_DB":
                        sourceDBName = parameter.getParamValue();
                        break;
                    case "TARGET_DB":
                        targetDBName = parameter.getParamValue();
                        break;
                    case "DATA_OPTION":
                        dataOption = parameter.getParamValue();
                        System.out.println("ColumnSelectionPage: dataOption" + dataOption);
                        break;
                    case "DATA_TYPE":
                        dataType = parameter.getParamValue();
                        System.out.println("ColumnSelectionPage: dataType" + dataType);
                        break;
                    case "SCHEMA_OPTION":
                        schemaOption = parameter.getParamValue();
                        break;
                    case "ERROR_TABLE":
                        missingTables = parameter.getParamValue();
                        break;
                    case "SOURCEDBUSER":
                        sourceDBUser = parameter.getParamValue();
                        break;
                    case "TARGETDBUSER":
                        targetDBUser = parameter.getParamValue();
                        break;
                    default:
                        break;
                }
            }

            try {
                ConnectionHelper ch = new ConnectionHelper();
                Reference r = ch.getDBReference(sourceDBName);
                DBConnection sourceDBConn = ch.extractDBConnection(r);
                initializeConnection(sourceDBConn, "source");
                r = ch.getDBReference(targetDBName);
                DBConnection targetDBConn = ch.extractDBConnection(r);
                initializeConnection(targetDBConn, "target");
            } catch (JAXBException ex) {
                Logger.getLogger(SchemaOptionSelection.class.getName()).log(Level.SEVERE, null, ex);
            }

            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    schemaOptionSelection = new SchemaOptionSelection();
                    schemaOptionSelection.setVisible(true);
                }
            });
        }

        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Windows".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(DatabaseHelper.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        /* Create and display the form */
        return true;
    }

    /*public static void main(String[] args) {

        /* Create and display the form 
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Windows".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ColumnSelectionPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ColumnSelectionPage().setVisible(true);
            }
        });
    }*/
    public static String sourceDBName, sourceDBUser, targetDBUser, targetDBName, taskName;
    private static String dataOption, schemaOption, dataType;
    private static List<DBTable> tabs = null;
    @SuppressWarnings("FieldMayBeFinal")
    private static DefaultListModel<String> selectedTableListModel = new DefaultListModel<>();
    @SuppressWarnings("FieldMayBeFinal")
    private static DefaultListModel<String> selectedTableColumnListModel = new DefaultListModel<>();
    private static String outputPath;
    private static List<SessionParameter> sessionParameter;
    private static Connection sourceConn, targetConn;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    // End of variables declaration//GEN-END:variables

    public void initializeConnection(DBConnection conn, String c) {
        try {

            if (c.equalsIgnoreCase("target")) {
                targetConn = new ConnectionProvider().getODSConnection(conn);
            } else if (c.equalsIgnoreCase("source")) {
                sourceConn = new ConnectionProvider().getODSConnection(conn);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            jLabel7.setText("Error Occurred while fetching data: " + ex.getLocalizedMessage());
            jLabel7.setForeground(Color.red);
        }
    }

    private ComparisonTask prepareTask(String taskName) {
        TaskSourceObject sourceObject = new TaskSourceObject();
        sourceObject.setTables(tabs);
        TaskTargetObject targetObject = new TaskTargetObject();
        targetObject.setTables(tabs);
        for (SessionParameter sp : sessionParameter) {
            switch (sp.getParamName().toUpperCase()) {
                case "SOURCEDBUSER":
                    sourceObject.setOwner(sp.getParamValue());
                    break;
                case "TARGETDBUSER":
                    targetObject.setOwner(sp.getParamValue());
                    break;
                case "DATA_OPTION":
                    dataOption = sp.getParamValue();
                    System.out.println("ColumnSelectionPage: dataOption" + dataOption);
                    break;
                case "DATA_TYPE":
                    dataType = sp.getParamValue();
                    System.out.println("ColumnSelectionPage: dataType" + dataType);
                    break;
                case "SCHEMA_OPTION":
                    schemaOption = sp.getParamValue();
                    break;
                default:
                    break;
            }
            if (sp.getParamName().equalsIgnoreCase("sourceDBUser")) {
                sourceObject.setOwner(sp.getParamValue());
            }
            if (sp.getParamName().equalsIgnoreCase("targetDBUser")) {
                targetObject.setOwner(sp.getParamValue());
            }
        }
        if (taskName == null) {
            taskName = "Task_" + new Date(System.currentTimeMillis()).toString();
        }
        ComparisonTask comparisonTask = new ComparisonTask();
        comparisonTask.setName(taskName);
        comparisonTask.setDataType(dataType);
        comparisonTask.setDataOption(dataOption);
        comparisonTask.setLastModifiedTime(String.valueOf(new Date(System.currentTimeMillis())));
        comparisonTask.setSourceObject(sourceObject);
        comparisonTask.setTargetObject(targetObject);
        comparisonTask.setSourceDBName(sourceDBName);
        comparisonTask.setTargetDBName(targetDBName);
        return comparisonTask;
    }

    public void loadSchemaComparison() {
        String outputFileFormat = null;
        if (jRadioButton1.isSelected() && jRadioButton1.isEnabled()) {
            outputFileFormat = "HTML";
        } else if (jRadioButton2.isSelected() && jRadioButton2.isEnabled()) {
            outputFileFormat = "TEXT";
        } else {
            outputFileFormat = "EXCEL";
        }

        StringBuilder tableColumns = new StringBuilder();
        String extraColumns = null;
        if (jCheckBox7.isSelected()) {
            tableColumns.append("NULLABLE ");
        }
        if (jCheckBox8.isSelected()) {
            tableColumns.append("DATA_LENGTH ");
        }
        if (jCheckBox9.isSelected()) {
            tableColumns.append("DATA_PRECISION ");
        }
        if (jCheckBox10.isSelected()) {
            tableColumns.append("DEFAULT_LENGTH ");
        }
        if (jCheckBox11.isSelected()) {
            tableColumns.append("DATA_SCALE ");
        }
        if (jCheckBox12.isSelected()) {
            tableColumns.append("DATA_DEFAULT ");
        }
        if (jCheckBox13.isSelected()) {
            tableColumns.append("CHAR_LENGTH ");
        }
        if (jCheckBox14.isSelected()) {
            tableColumns.append("LOW_VALUE ");
        }
        if (jCheckBox15.isSelected()) {
            tableColumns.append("HIGH_VALUE ");
        }

        if (tableColumns != null) {
            extraColumns = tableColumns.toString().trim().replace(" ", ",");
        }

        boolean compareByDefinition = true, showNameDifference = true;

        if (jRadioButton5.isSelected()) {
            compareByDefinition = false;
        } else if (!jCheckBox5.isSelected()) {
            showNameDifference = false;
        }

        long starttime = System.currentTimeMillis();
        System.out.println("Sending Database objects:" + databaseObjects);
        if (new SchemaOperation().showSchemaDifferences(sourceConn, targetConn, databaseObjects, sourceDBUser, targetDBUser, extraColumns, compareByDefinition, showNameDifference, outputPath, outputFileFormat, missingTables)) {
            if (outputFileFormat.equals("TEXT")) {
                int response = JOptionPane.showOptionDialog(null, "Results have been stored in file at " + outputPath + "...", "Message", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Open", "Cancel"}, JOptionPane.NO_OPTION);
                if (response == 0) {
                    String fileName = SchemaOperation.returnDetailedReport();
                    if (fileName != null) {
                        try {
                            Desktop.getDesktop().open(new File(fileName));
                            fileName = SchemaOperation.returnFinalReport();
                            if (fileName != null) {
                                Desktop.getDesktop().open(new File(fileName));
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(SchemaOptionSelection.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Error occurred while opening results. For more details, check report files " + outputPath + "...");
                        System.out.println("Final Report not found.");
                    }
                }
                jButton17.setEnabled(true);
            } else if (outputFileFormat.equals("HTML")) {
                int response = JOptionPane.showOptionDialog(null, "Report has been generated", "Message", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Open", "Cancel"}, JOptionPane.NO_OPTION);
                boolean fileFound = false;
                if (response == 0) {
                    for (File f : new File(outputPath + "\\HTML-Reports").listFiles()) {
                        if (f.getName().toUpperCase().startsWith("FINAL REPORT")) {
                            try {
                                Desktop.getDesktop().open(f);
                            } catch (IOException ex) {
                                Logger.getLogger(SchemaOptionSelection.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            fileFound = true;
                            break;
                        }
                    }
                    if (!fileFound) {
                        JOptionPane.showMessageDialog(null, "No differences found. Both DBs are same. For more details, check report files " + outputPath + "...");
                        System.out.println("Final Report not found.");
                    }
                }
                jButton17.setEnabled(true);
            }
        }
    }

}
