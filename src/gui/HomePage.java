/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import XMLHelper.ConnectionHelper;
import componentBean.DBConnection;
import componentBean.SessionParameter;
import dbHelper.DatabaseHelper;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.io.File;
import java.net.URL;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.bind.JAXBException;
import xmlBean.Reference;

/**
 *
 * @author nimeshd
 */
public class HomePage extends javax.swing.JFrame {

    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    SimpleDateFormat sdfTime = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
    String directory = System.getProperty("user.home") + "\\Desktop\\DBComp-Results";
    JFrame progressframe = new JFrame();
    String sourceUser, targetUser;

    /**
     * Creates new form DBCompHomePage
     */
    public HomePage() {
        File f = new File(directory);
        if (!f.exists()) {
            f.mkdir();
        }
        add(new LoadingPane());
        this.sourceDBListModel.addElement("");
        this.targetDBListModel.addElement("");
        dbConnNames = new XMLHelper.ConnectionHelper().getDBConnectionNames();
        //IDELogs.jTextArea1.setText("");
        if (dbConnNames != null) {
            for (String s : dbConnNames) {
                this.sourceDBListModel.addElement(s);
                this.targetDBListModel.addElement(s);
            }
            if (sessionParameters != null) {
                for (SessionParameter s : sessionParameters) {
                    if (s.getParamName().equals("TARGET_DB")) {
                        sourceDBListModel.setSelectedItem(s.getParamValue());
                        jComboBox1.setSelectedItem(s.getParamValue());
                    }
                    if (s.getParamName().equals("SOURCE_DB")) {
                        targetDBListModel.setSelectedItem(s.getParamValue());
                        jComboBox3.setSelectedItem(s.getParamValue());
                    }
                }
            }
        }
        initComponents();
        //System.out.println(jLabel19.getIcon().toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        checkbox2 = new java.awt.Checkbox();
        checkbox4 = new java.awt.Checkbox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox13 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox14 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Source Tables"));

        jTextField3.setToolTipText("Table Name");
        jTextField3.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jButton1.setText(">");

        jButton5.setText(">>");

        jList4.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList4);

        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        jButton7.setText("<");

        jButton6.setText("<<");

        checkbox2.setLabel("%");
        checkbox2.setName("like"); // NOI18N

        checkbox4.setLabel("Select all");

        jLabel1.setText("All tables");

        jLabel2.setText("Selected tables");

        jButton21.setText("Lookup");
        jButton21.setToolTipText("");
        jButton21.setName("sourceLookup"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField3)
                                .addGap(19, 19, 19)
                                .addComponent(checkbox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(50, 50, 50))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkbox4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkbox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkbox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(33, 33, 33)
                                    .addComponent(jButton5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton7))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jupiter - Database Comparer Tool");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Source Schema"));

        jLabel7.setText("Source DB");

        jLabel8.setText("User");

        jComboBox1.setModel(sourceDBListModel);
        jComboBox1.setName("sourceDB"); // NOI18N
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setText("Status");

        jLabel15.setText(":");
        jLabel15.setName("statusLabel1"); // NOI18N

        jTextField1.setEnabled(false);

        jCheckBox13.setForeground(new java.awt.Color(204, 204, 204));
        jCheckBox13.setToolTipText("Edit");
        jCheckBox13.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox13ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox13))
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox13))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel15.getAccessibleContext().setAccessibleName("statusLabel1");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Target Schema"));

        jLabel9.setText("Target DB");

        jLabel10.setText("User");

        jComboBox3.setModel(targetDBListModel);
        jComboBox3.setName("sourceDB"); // NOI18N
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("Status");

        jLabel16.setText(":");
        jLabel16.setName("statusLabel2"); // NOI18N

        jTextField2.setEnabled(false);

        jCheckBox14.setToolTipText("Edit");
        jCheckBox14.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox14ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel9))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField2)
                            .addComponent(jComboBox3, 0, 224, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(jCheckBox14)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBox14))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel16.getAccessibleContext().setAccessibleName("statusLabel2");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Object Selection"));

        jLabel3.setText("Limit the scope of your process by");
        jLabel3.setToolTipText("");

        jLabel6.setText("selecting the types of objects to be");
        jLabel6.setToolTipText("");

        jLabel11.setText("included. If you do not further limit ");
        jLabel11.setToolTipText("");

        jLabel12.setText("your process by selecting objects,");
        jLabel12.setToolTipText("");

        jLabel13.setText("all objects of the type selected here");
        jLabel13.setToolTipText("");

        jLabel14.setText("will be processed.");
        jLabel14.setToolTipText("");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Object Fetch Options"));

        buttonGroup3.add(jCheckBox3);
        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Database");
        jCheckBox3.setToolTipText("It will dynamically fetch tables from the provided connections");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        buttonGroup3.add(jCheckBox4);
        jCheckBox4.setText("External File");
        jCheckBox4.setToolTipText("Fetches from an external file containing dump of table names");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        buttonGroup3.add(jCheckBox12);
        jCheckBox12.setText("Last saved configuration");
        jCheckBox12.setToolTipText("Fetches table details saved in cache from the last database fetch");
        jCheckBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox4)
                        .addGap(33, 33, 33))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jCheckBox12)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jCheckBox12)
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Schema Options"));
        jPanel9.setEnabled(false);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Toggle All");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Tables");
        jCheckBox6.setEnabled(false);
        jCheckBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox6ItemStateChanged(evt);
            }
        });
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        jCheckBox8.setSelected(true);
        jCheckBox8.setText("Indexes");
        jCheckBox8.setEnabled(false);
        jCheckBox8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox8ItemStateChanged(evt);
            }
        });
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });

        jCheckBox9.setSelected(true);
        jCheckBox9.setText("Views");
        jCheckBox9.setEnabled(false);
        jCheckBox9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox9ItemStateChanged(evt);
            }
        });
        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox9ActionPerformed(evt);
            }
        });

        jCheckBox10.setSelected(true);
        jCheckBox10.setText("Triggers");
        jCheckBox10.setEnabled(false);
        jCheckBox10.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox10ItemStateChanged(evt);
            }
        });
        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox10ActionPerformed(evt);
            }
        });

        jCheckBox11.setSelected(true);
        jCheckBox11.setText("Sequences");
        jCheckBox11.setEnabled(false);
        jCheckBox11.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox11ItemStateChanged(evt);
            }
        });
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });

        jCheckBox5.setSelected(true);
        jCheckBox5.setText("Synonyms");
        jCheckBox5.setEnabled(false);
        jCheckBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox5ItemStateChanged(evt);
            }
        });

        jCheckBox7.setSelected(true);
        jCheckBox7.setText("Database Links");
        jCheckBox7.setEnabled(false);
        jCheckBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox7ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox6)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox8)
                            .addComponent(jCheckBox11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                .addComponent(jCheckBox9)
                                .addGap(54, 54, 54))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox10)
                                    .addComponent(jCheckBox5))
                                .addContainerGap())))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jCheckBox7)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addContainerGap())
        );

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Data Compare");
        jRadioButton1.setToolTipText("Only for data compare considering Source Schema as master. Won't present any structural change in Target schema.");
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Schema Compare");
        jRadioButton2.setToolTipText("Only for Structure, Definition and Availability comparison of Database objects.");
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Type"));

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setText("CLOB / BLOB");
        jRadioButton3.setToolTipText("Fetches all tables that have CLOB or BLOB type data. Please note that Flat data type columns will be skipped.");

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText("Flat");
        jRadioButton4.setToolTipText("Fetches all data that have datatype other than CLOB or BLOB");

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setText("All");
        jRadioButton5.setEnabled(false);
        jRadioButton5.setName("All data"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jRadioButton4)
                .addGap(34, 34, 34)
                .addComponent(jRadioButton3)
                .addGap(14, 14, 14))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRadioButton1)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jRadioButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Next");
        jButton3.setSelected(true);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Finish");
        jButton4.setEnabled(false);

        jButton8.setText("Back");
        jButton8.setEnabled(false);

        jLabel17.setText("Message:");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/Capture.PNG"))); // NOI18N

        jLabel18.setFont(new java.awt.Font("Century", 0, 10)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("Instantly compare Schema and Data");

        jLabel21.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 153, 204));
        jLabel21.setText("Comparison Utility for your Databases");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/62529E25.PNG"))); // NOI18N

        jLabel22.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Amdocs Intelligent Operations");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(204, 204, 255));

        jMenu1.setText("Connections");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Import");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Export");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Manage");
        jMenuItem4.setName("manageButton"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem12.setText("Restart");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Task");

        jMenuItem9.setText("Manage");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Import");
        jMenuItem10.setAutoscrolls(true);
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Export");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem6.setText("User Guide");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem8.setText("IDE Logs");
        jMenuItem8.setEnabled(false);
        jMenu3.add(jMenuItem8);

        jMenuItem13.setText("Check for Updates");
        jMenu3.add(jMenuItem13);

        jMenuItem7.setText("About");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton4)
                        .addComponent(jButton8))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        AboutDBComp.aboutMain();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ManageConnection.manageConnectionMain();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if (new XMLHelper.ImportExportConnection().importDBConnection()) {
            JOptionPane.showMessageDialog(null, "Successfully Imported DB details");
            this.setVisible(false);
            new HomePage().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Error occur while importing the details. Please check the input file and try again");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (new XMLHelper.ImportExportConnection().exportDBConnection()) {
            JOptionPane.showMessageDialog(null, "Successfully Exported");
        } else {
            JOptionPane.showMessageDialog(null, "Error occur while exporting the details to file. Please try again");
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        ManageTasks.manageTasksMain(homePage);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            //URL url = getClass().getClassLoader().getResource("resource/UserGuide.pdf");
            /*URL url = HomePage.class.getResource("/resource/UserGuide.pdf");

            System.out.println("URL to UserGuide: " + url.getPath());
            System.out.println(System.getProperty("java.class.path"));

            File f = new File(url.getFile());
            if (!f.exists()) {
                JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
                System.out.println("Check URL - " + url);
                url = HomePage.class.getResource("/resource");
                System.out.println("Does Resource accessible? " + new File(url.getFile()).exists());
            } else {
                //Desktop.getDesktop().open(f);
            }*/

            File jarPath = new File(HomePage.class.getProtectionDomain().getCodeSource().getLocation().getPath());
            String deploymentPath = jarPath.getParentFile().getAbsolutePath().replace("%20", " ");
            String pathToUserGuide = deploymentPath + "\\resource\\UserGuide.pdf";

            File userGuide = new File(pathToUserGuide);
            if (userGuide.exists()) {
                Desktop.getDesktop().open(userGuide);
            } else {
                JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
                System.out.println("Check URL - " + pathToUserGuide);
                System.out.println("Does Resource accessible? " + new File(pathToUserGuide).exists());
            }
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "User Guide missing. Please contact the author.");
            URL url = HomePage.class.getResource("/resource");
            System.out.println("Does Resource accessible? " + new File(url.getFile()).exists());
        } catch (Exception ex) {
            StringBuilder sb = new StringBuilder(ex.toString());
            for (StackTraceElement ste : ex.getStackTrace()) {
                sb.append("\n\t at ");
                sb.append(ste);
            }
            String trace = sb.toString();
            //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jLabel17.setText("Message: ");
        sourceDBListModel.setSelectedItem(null);
        targetDBListModel.setSelectedItem(null);
        jRadioButton1.setSelected(true);
        jRadioButton4.setSelected(true);
        jTextField1.setText(null);
        jTextField2.setText(null);
        jCheckBox2.setSelected(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int count = 0;
        List<SessionParameter> list = new ArrayList<>();
        if (sessionParameters != null) {
            for (SessionParameter sp : sessionParameters) {
                if ("TARGET_DB".equals(sp.getParamName()) || "SOURCE_DB".equals(sp.getParamName())) {
                    count++;
                }
                if ("SOURCE_USER".equals(sp.getParamName()) || "TARGET_USER".equals(sp.getParamName())) {
                    list.add(sp);
                }
                if ("Data_Option".equalsIgnoreCase(sp.getParamName()) || "Schema_Option".equalsIgnoreCase(sp.getParamName())) {
                    list.add(sp);
                }
            }
            sessionParameters.removeAll(list);
            list.clear();
            if (count == 2) {
                // Connections are good to proceed
                jButton3.setEnabled(false);
                if (jRadioButton1.isSelected()) {
                    System.out.println("Setting DataOption");

                    SessionParameter parameter = new SessionParameter();
                    parameter.setParamName("Data_Option");
                    if (jCheckBox3.isSelected() && jCheckBox4.isSelected() && jCheckBox3.isEnabled() && jCheckBox4.isEnabled()) {
                        System.out.println("setting All");
                        parameter.setParamValue("ALL");
                        sessionParameters.add(parameter);
                    } else if (jCheckBox3.isSelected() && jCheckBox3.isEnabled()) {
                        System.out.println("setting Table");
                        parameter.setParamValue("Table");
                        sessionParameters.add(parameter);
                    } else if (jCheckBox4.isSelected() && jCheckBox4.isEnabled()) {
                        System.out.println("setting View");
                        parameter.setParamValue("View");
                        sessionParameters.add(parameter);
                    } else {
                        System.out.println("ELSE");
                        jButton3.setEnabled(true);
                        jLabel17.setText("Message: Data option missing. Please select atleast one object to proceed");
                        jLabel17.setForeground(Color.red);
                    }
                    SessionParameter param = new SessionParameter();
                    param.setParamName("Data_Type");
                    if (jRadioButton5.isSelected() && jRadioButton5.isEnabled()) {
                        param.setParamValue("ALL");
                    } else if (jRadioButton4.isSelected() && jRadioButton4.isEnabled()) {
                        param.setParamValue("NON-CLOB");
                    } else if (jRadioButton3.isSelected() && jRadioButton3.isEnabled()) {
                        param.setParamValue("CLOB");
                    }
                    sessionParameters.add(param);
                } else if (jRadioButton2.isSelected()) {
                    System.out.println("Seeting Schema Option");
                    SessionParameter parameter = new SessionParameter();
                    parameter.setParamName("Schema_Option");
                    parameter.setParamValue(" ");
                    if (jCheckBox2.isSelected() && jCheckBox2.isEnabled()) {
                        parameter.setParamValue(parameter.getParamValue() + "ALL");
                    } else {
                        if (jCheckBox6.isSelected() && jCheckBox6.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "Table ");
                        }
                        if (jCheckBox8.isSelected() && jCheckBox8.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "Index ");
                        }
                        if (jCheckBox9.isSelected() && jCheckBox9.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "View ");
                        }
                        if (jCheckBox10.isSelected() && jCheckBox10.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "Trigger ");
                        }
                        if (jCheckBox11.isSelected() && jCheckBox11.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "Sequence ");
                        }
                        if (jCheckBox5.isSelected() && jCheckBox5.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "Synonym ");
                        }
                        if (jCheckBox7.isSelected() && jCheckBox7.isEnabled()) {
                            parameter.setParamValue(parameter.getParamValue() + "DBLinks ");
                        }
                        if (!jCheckBox11.isSelected() && !jCheckBox10.isSelected() && !jCheckBox9.isSelected()
                                && !jCheckBox8.isSelected() && !jCheckBox6.isSelected() && !jCheckBox5.isSelected() && !jCheckBox7.isSelected()) {
                            jButton3.setEnabled(true);
                            jLabel17.setText("Message: Schema option missing. Please select atleast one schema to proceed");
                            jLabel17.setForeground(Color.red);
                        }
                        parameter.setParamValue(parameter.getParamValue().trim());
                    }
                    sessionParameters.add(parameter);
                    System.out.println("param value:" + parameter.getParamValue());
                }
                boolean canProceed = true;
                if (jCheckBox13.isSelected()) {
                    if (jTextField1.getText().length() > 0) {
                        SessionParameter parameter = new SessionParameter();
                        parameter.setParamName("SOURCE_USER");
                        parameter.setParamValue(jTextField1.getText());
                        sessionParameters.add(parameter);
                    } else {
                        JOptionPane.showMessageDialog(null, "Source Schema is blank. Cannot proceed.");
                        canProceed = false;
                    }
                }
                if (jCheckBox14.isSelected()) {
                    if (jTextField2.getText().length() > 0) {
                        SessionParameter parameter = new SessionParameter();
                        parameter.setParamName("TARGET_USER");
                        parameter.setParamValue(jTextField2.getText());
                        sessionParameters.add(parameter);
                    } else {
                        JOptionPane.showMessageDialog(null, "Target Schema is blank. Cannot proceed.");
                        canProceed = false;
                    }
                }
                if (canProceed) {
                    System.out.println("Initializing object list....");
                    //new TableSelectionPage().tableSelectionMain(sessionParameters);
                    new InProgressWindow(this, sessionParameters, 1).setVisible(true);
                    jLabel17.setForeground(Color.BLACK);
                }else{
                    jButton3.setEnabled(true);     
                    jLabel17.setText("Message: Insufficient Inputs provided : Source or Target schema missing");
                    jLabel17.setForeground(Color.red);           
                }
                
            } else {
                jButton3.setEnabled(true);
                jLabel17.setText("Message: Insufficient Inputs provided : Source or Target Connection missing");
                jLabel17.setForeground(Color.red);
            }

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        ManageConnection.manageConnectionMain();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        if (new XMLHelper.ImportExportTasks().importTasks()) {
            JOptionPane.showMessageDialog(null, "Successfully Imported DB details");
            this.setVisible(false);
            new HomePage().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Error occur while importing the details. Please check the file and try again");
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        if (new XMLHelper.ImportExportTasks().exportTasks()) {
            JOptionPane.showMessageDialog(null, "Successfully Exported the saved tasks...");
        } else {
            JOptionPane.showMessageDialog(null, "Error occur while exporting the details. Please try again");
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // TODO add your handling code here:
        jLabel16.setText(":");
        jLabel17.setText("Message: ");
        boolean status = false;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String target = targetDBListModel.getSelectedItem().toString();
            jLabel17.setText("Message: Testing connection for " + target + "...");
            try {
                if (sessionParameters != null) {
                    Reference targetRef = new ConnectionHelper().getDBReference(target);
                    DBConnection targetDB = new ConnectionHelper().extractDBConnection(targetRef);
                    if (DatabaseHelper.testDBConnection(targetDB)) {
                        jTextField2.setText(targetDB.getUsername());
                        targetUser = targetDB.getUsername();
                        jTextField2.setEnabled(false);
                        for (SessionParameter sp : sessionParameters) {
                            if (sp.getParamName().equals("TARGET_DB")) {
                                sp.setParamValue(targetDB.getConnectionName());
                                status = true;
                            }
                        }
                        if (status == false) {
                            param = new SessionParameter();
                            param.setParamName("TARGET_DB");
                            param.setParamValue(targetDB.getConnectionName());
                            sessionParameters.add(param);
                            param = null;
                        }
                        jLabel16.setText("Success");
                        jLabel17.setForeground(Color.BLACK);
                        jLabel17.setText("Message: Good to proceed with " + target + "...");
                    } else {
                        JOptionPane.showMessageDialog(null, "Cannot connect to selected database. Please modify the details to proceed");
                        jLabel16.setText("Failure");
                        jLabel17.setForeground(Color.red);
                        jLabel17.setText("Error: Probably the connection details are old/invalid of " + target + ". If not, then please check the connectivity...");
                    }
                }
            } catch (JAXBException | SQLException ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                jLabel17.setText("Error: " + ex.getMessage() + ".  ");
            } catch (Exception ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                jLabel17.setText("Error: " + ex.getMessage() + ".  ");
            }
        }
        //String[] columnList = new dbHelper.DatabaseHelper().getTableList(connectionDetails, targetTable);
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        jLabel15.setText(":");
        jLabel17.setText("Message: ");
        boolean status = false;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String source = sourceDBListModel.getSelectedItem().toString();
            jLabel17.setText("Message: Testing connection for " + source + "...");
            try {
                if (sessionParameters != null) {
                    Reference sourceRef = new ConnectionHelper().getDBReference(source);
                    DBConnection sourceDB = new ConnectionHelper().extractDBConnection(sourceRef);
                    if (DatabaseHelper.testDBConnection(sourceDB)) {
                        jTextField1.setEnabled(false);
                        jTextField1.setText(sourceDB.getUsername());
                        sourceUser = sourceDB.getUsername();
                        for (SessionParameter sp : sessionParameters) {
                            if (sp.getParamName().equals("SOURCE_DB")) {
                                sp.setParamValue(sourceDB.getConnectionName());
                                status = true;
                            }
                        }
                        if (status == false) {
                            param = new SessionParameter();
                            param.setParamName("SOURCE_DB");
                            param.setParamValue(sourceDB.getConnectionName());
                            sessionParameters.add(param);
                            param = null;
                        }
                        jLabel15.setText("Success");
                        jLabel17.setForeground(Color.BLACK);
                        jLabel17.setText("Message: Good to proceed with " + source + "...");
                    } else {
                        JOptionPane.showMessageDialog(null, "Cannot connect to selected database. \nPlease modify this DB's details to proceed");
                        jLabel15.setText("Failure");
                        jLabel17.setForeground(Color.red);
                        jLabel17.setText("Error: Probably the connection details are old/invalid of " + source + ". If not, then please check the connectivity...");
                    }
                }
            } catch (JAXBException | SQLException ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                jLabel17.setText("Error: " + ex.getMessage() + ". ");
            } catch (Exception ex) {
                StringBuilder sb = new StringBuilder(ex.toString());
                for (StackTraceElement ste : ex.getStackTrace()) {
                    sb.append("\n\t at ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                //IDELogs.jTextArea1.setText(IDELogs.jTextArea1.getText() + "\n" + trace);
                jLabel17.setText("Error: " + ex.getMessage() + ".  ");
            }
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        jLabel17.setText("Message: Initializing tables for the selected databases. Please wait...");
        jLabel17.setForeground(Color.BLUE);
        //jButton3.setEnabled(false);
    }//GEN-LAST:event_jButton3MousePressed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        /*jPanel8.setEnabled(false);
        for (Component c : jPanel8.getComponents()) {
            if (c.isEnabled()) {
                c.setEnabled(false);
            }
        }
        jPanel7.setEnabled(false);
        for (Component c : jPanel7.getComponents()) {
            if (c.isEnabled()) {
                c.setEnabled(false);
            }
        }
        jPanel9.setEnabled(true);
        for (Component c : jPanel9.getComponents()) {
            if (!c.isEnabled()) {
                c.setEnabled(true);
            }
        }
        jRadioButton5.setEnabled(false);
        jCheckBox4.setEnabled(false);*/
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        /*jPanel9.setEnabled(false);
        for (Component c : jPanel9.getComponents()) {
            if (c.isEnabled()) {
                c.setEnabled(false);
            }
        }
        jPanel7.setEnabled(true);
        for (Component c : jPanel7.getComponents()) {
            if (!c.isEnabled()) {
                c.setEnabled(true);
            }
        }
        jPanel8.setEnabled(true);
        for (Component c : jPanel8.getComponents()) {
            if (!c.isEnabled()) {
                c.setEnabled(true);
            }
        }
        jRadioButton5.setEnabled(false);
        jCheckBox4.setEnabled(false);*/
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        //
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed

    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9ActionPerformed

    }//GEN-LAST:event_jCheckBox9ActionPerformed

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed

    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed

    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed

    }//GEN-LAST:event_jCheckBox11ActionPerformed

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            /*jPanel8.setEnabled(false);
            for (Component c : jPanel8.getComponents()) {
                if (c.isEnabled()) {
                    c.setEnabled(false);
                }
            }*/
            jPanel7.setEnabled(false);
            for (Component c : jPanel7.getComponents()) {
                if (c.isEnabled()) {
                    c.setEnabled(false);
                }
            }
            jPanel9.setEnabled(true);
            for (Component c : jPanel9.getComponents()) {
                if (!c.isEnabled()) {
                    c.setEnabled(true);
                }
            }
            jRadioButton5.setEnabled(false);
            if (jCheckBox4.isEnabled()) {
                jCheckBox4.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            jPanel9.setEnabled(false);
            for (Component c : jPanel9.getComponents()) {
                if (c.isEnabled()) {
                    c.setEnabled(false);
                }
            }
            jPanel7.setEnabled(true);
            for (Component c : jPanel7.getComponents()) {
                if (!c.isEnabled()) {
                    c.setEnabled(true);
                }
            }
            /*jPanel8.setEnabled(true);
            for (Component c : jPanel8.getComponents()) {
                if (!c.isEnabled()) {
                    c.setEnabled(true);
                }
            }*/
            jRadioButton5.setEnabled(false);
            if (!jCheckBox4.isEnabled()) {
                jCheckBox4.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (!jCheckBox6.isSelected()) {
                jCheckBox6.setSelected(true);
            }
            if (!jCheckBox8.isSelected()) {
                jCheckBox8.setSelected(true);
            }
            if (!jCheckBox9.isSelected()) {
                jCheckBox9.setSelected(true);
            }
            if (!jCheckBox10.isSelected()) {
                jCheckBox10.setSelected(true);
            }
            if (!jCheckBox11.isSelected()) {
                jCheckBox11.setSelected(true);
            }
            if (!jCheckBox5.isSelected()) {
                jCheckBox5.setSelected(true);
            }
            if (!jCheckBox7.isSelected()) {
                jCheckBox7.setSelected(true);
            }
        } else {
            if (jCheckBox6.isSelected()) {
                jCheckBox6.setSelected(false);
            }
            if (jCheckBox8.isSelected()) {
                jCheckBox8.setSelected(false);
            }
            if (jCheckBox9.isSelected()) {
                jCheckBox9.setSelected(false);
            }
            if (jCheckBox10.isSelected()) {
                jCheckBox10.setSelected(false);
            }
            if (jCheckBox11.isSelected()) {
                jCheckBox11.setSelected(false);
            }
            if (jCheckBox5.isSelected()) {
                jCheckBox5.setSelected(false);
            }
            if (jCheckBox7.isSelected()) {
                jCheckBox7.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void jCheckBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox5ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox6.isSelected() && jCheckBox9.isSelected() && jCheckBox10.isSelected()
                    && jCheckBox11.isSelected() && jCheckBox8.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox5ItemStateChanged

    private void jCheckBox7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox7ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox6.isSelected() && jCheckBox9.isSelected() && jCheckBox10.isSelected()
                    && jCheckBox11.isSelected() && jCheckBox8.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox7ItemStateChanged

    private void jCheckBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox6ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox8.isSelected() && jCheckBox9.isSelected() && jCheckBox10.isSelected()
                    && jCheckBox11.isSelected() && jCheckBox5.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox6ItemStateChanged

    private void jCheckBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox12ActionPerformed

    private void jCheckBox13ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox13ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            jTextField1.setEnabled(true);
        } else {
            jTextField1.setText(sourceUser);
            jTextField1.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox13ItemStateChanged

    private void jCheckBox14ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox14ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            jTextField2.setEnabled(true);
        } else {
            jTextField2.setText(targetUser);
            jTextField2.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox14ItemStateChanged

    private void jCheckBox9ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox9ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox8.isSelected() && jCheckBox6.isSelected() && jCheckBox10.isSelected()
                    && jCheckBox11.isSelected() && jCheckBox5.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox9ItemStateChanged

    private void jCheckBox11ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox11ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox8.isSelected() && jCheckBox9.isSelected() && jCheckBox10.isSelected()
                    && jCheckBox6.isSelected() && jCheckBox5.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox11ItemStateChanged

    private void jCheckBox10ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox10ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox8.isSelected() && jCheckBox9.isSelected() && jCheckBox6.isSelected()
                    && jCheckBox11.isSelected() && jCheckBox5.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox10ItemStateChanged

    private void jCheckBox8ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox8ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jCheckBox6.isSelected() && jCheckBox9.isSelected() && jCheckBox10.isSelected()
                    && jCheckBox11.isSelected() && jCheckBox5.isSelected() && jCheckBox7.isSelected() && !jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(true);
            }
        } else {
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
        }
    }//GEN-LAST:event_jCheckBox8ItemStateChanged

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        this.setVisible(false);
        new HomePage().setVisible(true);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed

    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed

    }//GEN-LAST:event_jCheckBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {

            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                homePage = new HomePage();
                homePage.setVisible(true);
            }
        });
    }

    public void mainHome(List<SessionParameter> sp) {
        sessionParameters = sp;
        //System.out.println("Inside Main Home");
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        if (sp != null) {
            dispose();
            /*java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    homePage = new HomePage();
                    homePage.setVisible(true);
                }
            });*/
        }
        dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                homePage = new HomePage();
                homePage.setVisible(true);
            }
        });
    }

    private DefaultComboBoxModel<String> sourceDBListModel = new DefaultComboBoxModel<>();
    private DefaultComboBoxModel<String> targetDBListModel = new DefaultComboBoxModel<>();
    private DBConnection connectionDetails = new DBConnection();
    public String[] dbConnNames;
    private SessionParameter param = null;
    private List<SessionParameter> sessionParameters = new ArrayList<>();
    private static HomePage homePage;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private java.awt.Checkbox checkbox2;
    private java.awt.Checkbox checkbox4;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton21;
    public javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    public javax.swing.JCheckBox jCheckBox10;
    public javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    public javax.swing.JCheckBox jCheckBox2;
    public javax.swing.JCheckBox jCheckBox3;
    public javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    public javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    public javax.swing.JCheckBox jCheckBox8;
    public javax.swing.JCheckBox jCheckBox9;
    public javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public javax.swing.JRadioButton jRadioButton1;
    public javax.swing.JRadioButton jRadioButton2;
    public javax.swing.JRadioButton jRadioButton3;
    public javax.swing.JRadioButton jRadioButton4;
    public javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

    public void loadTables(InProgressWindow aThis) {

        SessionParameter parameter = new SessionParameter();
        parameter.setParamName("NEW-CONFIG");
        if (jCheckBox12.isSelected()) {
            parameter.setParamValue("FALSE");
        } else if (jCheckBox3.isSelected() || jCheckBox4.isSelected()) {
            parameter.setParamValue("TRUE");
        }
        sessionParameters.add(parameter);

        for (SessionParameter parameter1 : sessionParameters) {
            System.out.println(parameter1.getParamName() + " - " + parameter1.getParamValue());
        }

        if (!jCheckBox4.isSelected()) {
            new TableSelectionPage().tableSelectionMain(sessionParameters);
        } else {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("C:\\"));
            int state = chooser.showDialog(chooser, "Fetch Tables from...");
            if (state == JFileChooser.APPROVE_OPTION) {
                String pathToXML = chooser.getSelectedFile().getAbsolutePath();
                System.out.println("File Path : " + pathToXML);
                File f = new File(pathToXML);
                new TableSelectionPage(f, sessionParameters);
            }
        }
        this.setVisible(false);
    }

}
